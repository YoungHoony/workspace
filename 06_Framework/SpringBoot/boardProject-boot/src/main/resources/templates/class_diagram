-----연습 문제 1-----

public class A {
  private B b;
}

public class B {
  private String f1;
  private int f2;

}

-----연습 문제 2-----
public class Test1 {
  private Test2 t2;
  public Test3 method1(){
    return new Test3();
  }
}

public class Test2 {
  private int f1;
}

public class Test3{
  public String str;
  public String getStr() { 
     return str;
  }

  public void setStr(String str) {
    this.str = str;
  }
}

-----연습 문제 3-----
public abstract class Parent{
  public void parentMethod(){};
  protected abstract void print();
}

public class Child extends Parent {
  private String name;
  public void childMethod(){};
  protected void print(){};
}

-----연습 문제 4------
public abstract class Shape {
  public void draw(){};
  public void erase(){};
  public int getLength(){};
  protected abstract double getArea();
}

public interface Resizable {
  public void resize(){};
}

public class Triangle extends Shape implements Resizable{
  public bollean isEquilateral(){}
  protected double getArea(){}
  public void resize(){}

}

public class Rectangle extends Shape implements Resizable {
  public boolean isSquare(){  }
  protected double getArea(){}
  public void resize(){}
}

----- 연습문제 5 ------
public class ClassRoom {
  private Student std;

  public ClassRoom(Student std) {
    this std = std;
  }
}

public class Student {
  private String name;
  private int age;
}

----- 연습문제 6 -----
public class Library {
  private Book book;
  public Library(){
    this.book = new book();
  }
}

public class Book {
  private String title;
  private String authorr;
}

----- 연습문제 7 -----
public class Shop {
  private Produect product;
  private Employee emp;

  public Shop(product p) {
    this.product = p;
    this.emp = new Employee();
  }
}

public class Product {
  private String pName;
  private int price;
}

public class Employee {
  private String name;
}

----- 연습 문제 8 -----
public class Cafe {
  private String name;
  private String address;
  private CafeLatte latee;

  public Cafe(CafeLatee latte) {
    this.latte = latte;
  }
}

public abstract class Coffee {
  public String beans;
}

public class CafeLatte extends Coffee {
  private String temperature;
  private int price;
  public void drink(){
    Option opt = new Option();
  }
}

public class Option{
  private int shot;
  private String ice;
  private int syrup;
}